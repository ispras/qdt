__all__ = [
    "SoftStream"
]


class SoftStream(object):
    """ A base class for implementing software generated byte streams.
    """

    def __init__(self, size):
        self._offset = 0
        self._size = size

    def tell(self):
        return self._offset

    def seek(self, offset, whence = 0):
        # TODO: keep resulting offset within [0, self._size)
        return getattr(self, "_seek_%d" % whence)(offset)

    def _seek_0(self, offset):
        self._offset = offset
        return offset

    def _seek_1(self, offset):
        offset += self._offset
        self._offset = offset
        return offset

    def _seek_2(self, offset):
        offset += self._size
        self._offset = offset
        return offset

    def read(self, size = None):
        if size is None:
            size = self._size - self._offset
        else:
            size = min(size, self._size - self._offset)
        if size < 1:
            return b""
        else:
            return b"".join(self._read_iter(size))

    # subclass may override this
    def close(self):
        pass

    def _read_iter(self, size):
        raise NotImplementedError
